#!/bin/bash

# Any copyright is dedicated to the Public Domain.
# http://creativecommons.org/publicdomain/zero/1.0/

set -eEu -o pipefail
shopt -s extdebug
IFS=$'\n\t'
trap 'onFailure $?' ERR

function onFailure() {
  echo "Unhandled script error $1 at ${BASH_SOURCE[0]}:${BASH_LINENO[0]}" >&2
  exit 1
}

# "NDK_ARCH;NODEJS_ARCH"
declare -a archs=(
  "armeabi-v7a;arm"
  # "arm64-v8a;arm64"
  # "x86;x86"
  # "x86_64;x64"
)

NODE_VERSION=10.13.0 # This is given by nodejs-mobile
NODE_MODULE_VERSION=64 # See https://nodejs.org/en/download/releases

cd android;
if [ -f ./gradlew ]
then
  GRADLE_EXEC="./gradlew"
else
  GRADLE_EXEC="gradle"
fi
echo $GRADLE_EXEC;
for entry in "${archs[@]}"
do
  IFS=";" read -r -a arr <<< "${entry}" # entry.split(';')
  arch="${arr[0]}"

  echo "Building native modules for $arch...";
  $GRADLE_EXEC nodejs-mobile-react-native:GenerateNodeNativeAssetsLists$arch
done
cd ..;
echo "";

echo -en "Minifying with noderify...";
cd ./nodejs-assets/nodejs-project;
$(npm bin)/noderify \
  --replace.bindings=bindings-noderify-nodejs-mobile \
  --replace.node-extend=xtend \
  --replace.non-private-ip=non-private-ip-android \
  --replace.utp-native=utp-native-no-prebuild \
  --filter=rn-bridge \
  --filter=bufferutil \
  --filter=utf-8-validate \
  index.js > _index.js;
rm index.js;
mv _index.js index.js;
cd ../..;
echo -en " done.\n";

echo -en "Replacing node_modules folder...";
rm -rf ./nodejs-assets/nodejs-project/node_modules;

## The for loop below seems unnecessary. TODO: delete it eventually
# for entry in "${archs[@]}"
# do
#   IFS=";" read -r -a arr <<< "${entry}" # entry.split(';')
#   ndkArch="${arr[0]}"
#   nodejsArch="${arr[1]}"

#   origNodeModules="./android/build/nodejs-native-assets/nodejs-native-assets-$ndkArch/node_modules"
#   destNodeModules="./nodejs-assets/nodejs-project/node_modules"
#   bindingsDir="compiled/$NODE_VERSION/android/$nodejsArch"

#   # bufferutil
#   mkdir -p $destNodeModules/bufferutil/$bindingsDir
#   cp $origNodeModules/bufferutil/prebuilds/linux-x64/node-napi.node $destNodeModules/bufferutil/$bindingsDir/bufferutil.node

#   # leveldown
#   mkdir -p $destNodeModules/leveldown/$bindingsDir
#   cp $origNodeModules/leveldown/build/Release/leveldown.node $destNodeModules/leveldown/$bindingsDir/leveldown.node

#   # sodium-native
#   mkdir -p $destNodeModules/sodium-native/$bindingsDir
#   cp $origNodeModules/sodium-native/prebuilds/linux-arm/node-$NODE_MODULE_VERSION.node $destNodeModules/sodium-native/$bindingsDir/sodium.node

#   # utf-8-validate
#   mkdir -p $destNodeModules/utf-8-validate/$bindingsDir
#   cp $origNodeModules/utf-8-validate/prebuilds/linux-x64/node-napi.node $destNodeModules/utf-8-validate/$bindingsDir/utf-8-validate.node

#   # utp-native-no-prebuild
#   mkdir -p $destNodeModules/utp-native-no-prebuild/$bindingsDir
#   cp $origNodeModules/utp-native-no-prebuild/build/Release/utp.node $destNodeModules/utp-native-no-prebuild/$bindingsDir/utp.node
# done
echo -en " done.\n";

echo -en "Removing other unused files...";
rm ./nodejs-assets/nodejs-project/package-lock.json
# make a list of things to delete then delete them
# `-exec rm -rf {} \;` confuses find because the recursion can no longer find a step (depth-first traversal (-d) would also work)
# GNU find and modern BSD/macOS find have a `-delete` operator
find ./nodejs-assets/nodejs-project \
  -type d \
  \( \
    -name "darwin-x64" \
    -o -name "win32-ia32" \
    -o -name "win32-x64" \
  \) \
  -print0 | xargs -0 rm -rf # delete everything in the list
echo -en " done.\n";
